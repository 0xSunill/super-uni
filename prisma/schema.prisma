generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  username     String?  @unique     
  passwordHash String
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Optional 1â€“1 profiles
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?  @unique

  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId String?  @unique
}

model Student {
  id         String   @id @default(uuid())
  rollNo     String   @unique
  name       String
  // email moved to User
  department Department
  year       Year     @relation(fields: [yearId], references: [id])
  yearId     String
  phone      String?  @unique
  gender     Gender
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  marks       Mark[]
  attendances Attendance[]
  subjects    Subject[]
  wallet      Wallet?  @relation("StudentWallet")
  
  // Back-reference to User (this was missing)
  user        User?

  @@index([rollNo])
}

model Teacher {
  id         String   @id @default(uuid())
  name       String
  // email moved to User
  department Department
  phone      String?  @unique
  experience Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  subjects Subject[]
  lessons  Lesson[]
  wallet   Wallet?   @relation("TeacherWallet")
  
  // Back-reference to User (this was missing)
  user     User?
}

model Wallet {
  id        String   @id @default(uuid())
  address   String   @unique
  currency  String   @default("USDC")
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher   Teacher? @relation("TeacherWallet", fields: [teacherId], references: [id])
  teacherId String?  @unique
  student   Student? @relation("StudentWallet", fields: [studentId], references: [id])
  studentId String?  @unique
}

model Attendance {
  id        String    @id @default(uuid())
  studentId String
  subjectId String
  date      DateTime
  status    AttStatus

  student Student @relation(fields: [studentId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([studentId, subjectId, date])
  @@index([date])
}

model Mark {
  id        String   @id @default(uuid())
  studentId String
  subjectId String
  score     Int
  date      DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@index([studentId])
  @@index([subjectId])
}

model Year {
  id       String    @id @default(uuid())
  year     Int       @unique
  students Student[]
  subjects Subject[]
}

model Subject {
  id         String     @id @default(uuid())
  code       String     @unique
  name       String
  department Department
  yearId     String

  teachers    Teacher[]
  students    Student[]
  attendances Attendance[]
  marks       Mark[]
  year        Year         @relation(fields: [yearId], references: [id])
  lessons     Lesson[]

  @@index([code])
}

model Lesson {
  id        String   @id @default(uuid())
  subjectId String
  day       Day
  startTime DateTime
  endTime   DateTime
  room      String?

  subject   Subject  @relation(fields: [subjectId], references: [id])
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId String?

  @@index([subjectId, day])
}

model Announcement {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
}

enum Department {
  MCA
  MSC
  OTHERS
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum AttStatus {
  CANCELLED
  ABSENT
  PRESENT
}